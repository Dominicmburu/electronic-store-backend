generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int             @id @default(autoincrement())
  name           String
  email          String          @unique
  phoneNumber    String
  password       String
  role           Role            @default(USER)
  isActive       Boolean         @default(true)
  settingsId     Int?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  addresses      Address[]       @relation("UserAddresses")
  cart           Cart?           @relation("UserCart")
  orders         Order[]         @relation("UserOrders")
  paymentMethods PaymentMethod[] @relation("UserPaymentMethods")
  reviews        Review[]        @relation("UserReviews")
  settings       Settings?       @relation("UserSettings")
  wishlist       Wishlist[]      @relation("UserWishlist")
  wallet           Wallet?          @relation("UserWallet")
  transactions     Transaction[]    @relation("UserTransactions")
  refundRequests   RefundRequest[]  @relation("UserRefundRequests")
  processedRefunds RefundRequest[]  @relation("AdminProcessedRefunds")
}

model Address {
  id      Int    @id @default(autoincrement())
  userId  Int
  address String
  city    String
  state   String
  zip     String
  country String
  user    User   @relation("UserAddresses", fields: [userId], references: [id])
}

model PaymentMethod {
  id      Int    @id @default(autoincrement())
  userId  Int
  type    PaymentMethodType
  details String
  user    User   @relation("UserPaymentMethods", fields: [userId], references: [id])
}

model Wishlist {
  userId    Int
  productId Int
  product   Product @relation("ProductWishlist", fields: [productId], references: [id])
  user      User    @relation("UserWishlist", fields: [userId], references: [id])

  @@id([userId, productId])
}

model Settings {
  id                Int     @id @default(autoincrement())
  userId            Int     @unique
  newsSubscription  Boolean @default(false)
  notificationEmail Boolean @default(true)
  notificationSMS   Boolean @default(false)
  user              User    @relation("UserSettings", fields: [userId], references: [id])
}

model Product {
  id             Int         @id @default(autoincrement())
  name           String
  description    String
  lastPrice      Float
  currentPrice   Float
  specifications Json
  images         String[]
  isFeatured     Boolean     @default(false)
  stockQuantity  Int         @default(0)
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  categoryId     Int
  cartItems      CartItem[]  @relation("ProductCartItems")
  orderItems     OrderItem[] @relation("ProductOrderItems")
  category       Category    @relation("CategoryProducts", fields: [categoryId], references: [id])
  reviews        Review[]    @relation("ProductReviews")
  wishlistItems  Wishlist[]  @relation("ProductWishlist")
}

model Category {
  id            Int         @id @default(autoincrement())
  name          String
  description   String
  images        String[]
  printerTypeId Int
  printerType   PrinterType @relation("PrinterTypeCategories", fields: [printerTypeId], references: [id])
  products      Product[]   @relation("CategoryProducts")
}

model PrinterType {
  id           Int        @id @default(autoincrement())
  name         String
  printerCount Int        @default(0)
  categories   Category[] @relation("PrinterTypeCategories")
}

model Cart {
  id          Int        @id @default(autoincrement())
  userId      Int        @unique
  totalAmount Float      @default(0)
  user        User       @relation("UserCart", fields: [userId], references: [id])
  items       CartItem[] @relation("CartItems")
}

model CartItem {
  id        Int     @id @default(autoincrement())
  cartId    Int
  productId Int
  quantity  Int     @default(1)
  subtotal  Float   @default(0)
  cart      Cart    @relation("CartItems", fields: [cartId], references: [id])
  product   Product @relation("ProductCartItems", fields: [productId], references: [id])
}

model Order {
  id              Int           @id @default(autoincrement())
  orderNumber     String        @unique
  orderDate       DateTime      @default(now())
  customerName    String
  shippingAddress String
  paymentMethod   PaymentMethodType
  status          OrderStatusEnum  @default(PENDING)
  userId          Int
  user            User             @relation("UserOrders", fields: [userId], references: [id])
  orderItems      OrderItem[]      @relation("OrderItems")
  statusHistory   OrderStatus[]    @relation("OrderStatus")
  orderTransaction Transaction[]    @relation("OrderTransaction")
  refundRequests   RefundRequest[]  @relation("OrderRefund")
}

model OrderItem {
  id        Int     @id @default(autoincrement())
  orderId   Int
  productId Int
  quantity  Int
  price     Float
  order     Order   @relation("OrderItems", fields: [orderId], references: [id])
  product   Product @relation("ProductOrderItems", fields: [productId], references: [id])
}

model OrderStatus {
  id        Int      @id @default(autoincrement())
  status    String
  orderId   Int
  updatedAt DateTime @default(now())
  order     Order    @relation("OrderStatus", fields: [orderId], references: [id])
}

model Review {
  id        Int      @id @default(autoincrement())
  content   String
  rating    Int
  userId    Int
  productId Int
  createdAt DateTime @default(now())
  product   Product  @relation("ProductReviews", fields: [productId], references: [id])
  user      User     @relation("UserReviews", fields: [userId], references: [id])
}

model Shop {
  id        Int    @id @default(autoincrement())
  name      String
  address   String
  phone     String
  email     String
  hours     String
  latitude  Float
  longitude Float
}

model Wallet {
  id          Int       @id @default(autoincrement())
  userId      Int       @unique
  balance     Float     @default(0)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  user        User      @relation("UserWallet", fields: [userId], references: [id])
  transactions Transaction[] @relation("WalletTransactions")
}

model Transaction {
  id                Int               @id @default(autoincrement())
  transactionType   TransactionType
  amount            Float
  description       String?
  status            TransactionStatus @default(PENDING)
  reference         String            @unique
  paymentMethod     PaymentMethodType
  walletId          Int?
  userId            Int
  orderId           Int?             
  mpesaReceiptId    String?           @unique
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  metaData          Json?             // Store additional data like callbacks
  wallet            Wallet?           @relation("WalletTransactions", fields: [walletId], references: [id])
  user              User              @relation("UserTransactions", fields: [userId], references: [id])
  order             Order?            @relation("OrderTransaction", fields: [orderId], references: [id])
}

model MpesaCallback {
  id              Int       @id @default(autoincrement())
  transactionType String    // STK, B2C, C2B
  merchantRequestId String?
  checkoutRequestId String?
  resultCode      Int
  resultDesc      String
  callbackMetadata Json?
  transactionId   String?
  phoneNumber     String?
  createdAt       DateTime  @default(now())
}

model RefundRequest {
  id             Int            @id @default(autoincrement())
  orderId        Int
  userId         Int
  amount         Float
  reason         String
  status         RefundStatus   @default(PENDING)
  processedBy    Int?
  processedAt    DateTime?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  order          Order          @relation("OrderRefund", fields: [orderId], references: [id])
  user           User           @relation("UserRefundRequests", fields: [userId], references: [id])
  adminUser      User?          @relation("AdminProcessedRefunds", fields: [processedBy], references: [id])
}



enum Role {
  USER
  ADMIN
}

enum OrderStatusEnum {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

enum PaymentMethodType {
  CASH
  MPESA
  CREDIT_CARD
  DEBIT_CARD
  PAYPAL
  BANK_TRANSFER
  UPI
  WALLET
}

enum TransactionType {
  PAYMENT
  REFUND
  WALLET_TOPUP
  WALLET_WITHDRAWAL
  WALLET_PAYMENT
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum RefundStatus {
  PENDING
  APPROVED
  REJECTED
  PROCESSED
}
